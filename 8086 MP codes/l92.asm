TITLE SUM OF SERIES
	.MODEL SMALL
	.STACK 64
	.DATA
MAX_CHAR DB 3
ACT_CHAR DB ?
INP DB 4 DUP('$')
NUM DW 0
SUM DW 0
NEWLN DB 0DH,0AH,'$'
	.CODE
MAIN PROC FAR
	MOV AX,@DATA
	MOV DS,AX
	
	MOV AH,0AH
	MOV DX,OFFSET MAX_CHAR
	INT 21H
	
	MOV CH,0
	MOV CL,ACT_CHAR
	MOV BX,OFFSET INP
	MOV DH,0
	MOV DL,10
	
CONVERT:				;CONVERT TO HEX FROM ASCII
	MOV AL,[BX]
	CMP AL,'$'
	JE NEXT
	SUB AL,30H
	MOV AH,0
	ADD AX,NUM
	MUL DL				;MULTIPLY BY 10, STORED IN AX
	MOV NUM,AX			;STORE THE VALUE IN NUM
	INC BX
LOOP CONVERT

NEXT:
	MOV AX,NUM
	MOV CX,10			;TO DIVIDE
	MOV DX,0			;BECAUSE DX:AX IS USED IN DIVISION
	DIV CX
	MOV CX,AX			;CX NOW CONTAINS THE ENTERED INPUT (IN HEX)
	
	MOV BL,02			;CHANGING VALUE
	MOV BH,02			;FIXED VALUE
SERIES:
	MOV AL,BL
	MUL BH				;MULTIPLY AL BY 2, ANSWER STORED IN AX
	MUL BL				;MULTIPLY BY BL, WRONG ANSWER IF AX>256
	ADD SUM,AX
	INC BL
LOOP SERIES

	MOV AH,09H			;NEWLINE FOR OUTPUT
	MOV DX,OFFSET NEWLN
	INT 21H
	
	MOV CX,0
	MOV AX,SUM
	MOV BX,10			;TO DIVIDE
DISPFORMAT:
	MOV DX,0			;BECAUSE DX:AX IS USED
	DIV BX
	ADD DX,30H			;CONVERT TO ASCII
	PUSH DX				;REMAINDER (LSB) IS PUSHED IN STACK 
	INC CX
	CMP AX,0
	JE QUIT
	JMP DISPFORMAT
QUIT:
	MOV AH,02
OUTPUT:
	POP DX
	INT 21H
	LOOP OUTPUT
	
	MOV AX,4C00H
	INT 21H
	
MAIN ENDP
	END MAIN
	
	
	
	